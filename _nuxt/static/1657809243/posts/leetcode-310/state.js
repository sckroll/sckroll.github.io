window.__NUXT__=(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,bA,bB,bC,bD,bE,bF,bG,bH,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1657809243",layout:"default",error:aU,state:{post:{slug:"leetcode-310",description:"Minimum Height Trees",title:"LeetCode 310번 문제",tags:"algorithm, leetcode, python, tree",toc:[{id:aV,depth:V,text:aW},{id:aX,depth:V,text:aY},{id:aZ,depth:ah,text:a_},{id:a$,depth:ah,text:ba},{id:bb,depth:V,text:bc},{id:bd,depth:ah,text:be},{id:W,depth:V,text:W}],body:{type:"root",children:[{type:b,tag:X,props:{id:aV},children:[{type:b,tag:x,props:{href:"#%EB%AC%B8%EC%A0%9C-%EB%A7%81%ED%81%AC",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:aW}]},{type:a,value:i},{type:b,tag:"p",props:{},children:[{type:b,tag:x,props:{href:bf,rel:[ai,aj,ak],target:al},children:[{type:a,value:bf}]}]},{type:a,value:i},{type:b,tag:X,props:{id:aX},children:[{type:b,tag:x,props:{href:"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4-%ED%92%80%EC%9D%B4-%EC%8B%A4%ED%8C%A8",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:aY}]},{type:a,value:i},{type:b,tag:am,props:{id:aZ},children:[{type:b,tag:x,props:{href:"#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84-%EC%8B%9C%EA%B0%84-%EC%B4%88%EA%B3%BC",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:a_}]},{type:a,value:i},{type:b,tag:R,props:{},children:[{type:a,value:i},{type:b,tag:I,props:{},children:[{type:a,value:"트리 순회 결과를 우선순위 큐(힙)에 저장 후 높이가 가장 낮은 결과들만 추출하여 리턴하여 구현했으나 TLE가 떴다..."}]},{type:a,value:i}]},{type:a,value:i},{type:b,tag:an,props:{},children:[{type:a,value:i},{type:b,tag:ao,props:{},children:[{type:a,value:ap}]},{type:a,value:i},{type:b,tag:L,props:{markdown:y},children:[{type:a,value:i},{type:b,tag:L,props:{className:[aq]},children:[{type:b,tag:ar,props:{className:[as,at]},children:[{type:b,tag:Y,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:au}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:M}]},{type:a,value:aw},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:M}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:bg},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ax}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,ay]},children:[{type:a,value:"MySolution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aA}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,aB]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        p_queue "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:bh}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:A}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:A}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bl},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:bm}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bo},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Q}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:bp}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ab}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:br},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:bt}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:A}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bv},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:J}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:bw}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:by},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aO}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:bA}]},{type:a,value:bB},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:bC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:bD},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"# 우선순위 큐에 추가"}]},{type:a,value:"\n            heapq"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"heappush"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:bE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"# 우선순위 큐에서 길이가 최소인 루트 노드만 추출"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"# 하나뿐만 아니라 여러 개일 수도 있으므로 최소가 아닌 값이 나올 때까지 루프"}]},{type:a,value:"\n        min_node "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:bF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bH},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"min_node"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ab}]},{type:a,value:" p_queue"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n            length"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:bF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:J}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:af}]},{type:a,value:" min_node"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ag}]},{type:a,value:bJ}]}]}]},{type:a,value:i}]},{type:a,value:i}]},{type:a,value:i},{type:b,tag:am,props:{id:a$},children:[{type:b,tag:x,props:{href:"#%EB%91%90-%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84-%EC%8B%9C%EA%B0%84-%EC%B4%88%EA%B3%BC",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:ba}]},{type:a,value:i},{type:b,tag:R,props:{},children:[{type:a,value:i},{type:b,tag:I,props:{},children:[{type:a,value:"우선순위 큐를 사용하는 대신 트리를 순회하면서 최소 높이의 트리만 루트 값을 "},{type:b,tag:Y,props:{},children:[{type:a,value:"result"}]},{type:a,value:" 리스트에 저장하기로 했으나, 마찬가지로 TLE가 뜨고 말았다. 우선순위 큐가 원인이 아니라 트리를 순회하는 부분이 문제인 듯 하다."}]},{type:a,value:i}]},{type:a,value:i},{type:b,tag:an,props:{},children:[{type:a,value:i},{type:b,tag:ao,props:{},children:[{type:a,value:ap}]},{type:a,value:i},{type:b,tag:L,props:{markdown:y},children:[{type:a,value:i},{type:b,tag:L,props:{className:[aq]},children:[{type:b,tag:ar,props:{className:[as,at]},children:[{type:b,tag:Y,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:au}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:M}]},{type:a,value:aw},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:M}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:bg},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ax}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,ay]},children:[{type:a,value:"MySolution2"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aA}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,aB]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        min_length "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:bK}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"*"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"10"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"**"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"4"}]},{type:a,value:bH},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:bh}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:A}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:A}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bl},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:bm}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bo},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Q}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:bp}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ab}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:br},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:bt}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:A}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bv},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:J}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:bw}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:by},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aO}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:bA}]},{type:a,value:bB},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:bC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:bD},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n                \n            "},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"# 트리의 길이가 최소 길이보다 더 작을 때 해당 루트 노드로 result 리스트 초기화"}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"# 최소 길이가 같은 루트 노드가 더 있다면 result 리스트에 추가"}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:J}]},{type:a,value:bL},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"\u003C"}]},{type:a,value:bM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n                min_length "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:" max_length\n                result "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"elif"}]},{type:a,value:bL},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:af}]},{type:a,value:bM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ag}]},{type:a,value:bJ}]}]}]},{type:a,value:i}]},{type:a,value:i}]},{type:a,value:i},{type:b,tag:X,props:{id:bb},children:[{type:b,tag:x,props:{href:"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:bc}]},{type:a,value:i},{type:b,tag:am,props:{id:bd},children:[{type:b,tag:x,props:{href:"#1-%EB%8B%A8%EA%B3%84%EB%B3%84-%EB%A6%AC%ED%94%84-%EB%85%B8%EB%93%9C-%EC%A0%9C%EA%B1%B0",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:be}]},{type:a,value:i},{type:b,tag:R,props:{},children:[{type:a,value:i},{type:b,tag:I,props:{},children:[{type:a,value:"최소 높이를 구성하려면 가장 가운데에 위치한 값이 루트여야 한다."}]},{type:a,value:i},{type:b,tag:I,props:{},children:[{type:a,value:"즉, 리프 노드를 하나씩 제거하면서 남아 있는 값을 찾으면 해당 값이 가장 가운데에 있는 값이므로 해당 값을 루트로 하여 트리를 구성하면 높이가 최소인 트리를 구성할 수 있다."}]},{type:a,value:i}]},{type:a,value:i},{type:b,tag:an,props:{},children:[{type:a,value:i},{type:b,tag:ao,props:{},children:[{type:a,value:ap}]},{type:a,value:i},{type:b,tag:L,props:{markdown:y},children:[{type:a,value:i},{type:b,tag:L,props:{className:[aq]},children:[{type:b,tag:ar,props:{className:[as,at]},children:[{type:b,tag:Y,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:au}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:M}]},{type:a,value:aw},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:M}]},{type:a,value:" collections\n\n\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ax}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,ay]},children:[{type:a,value:"Solution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aA}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,aB]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"# 예외 처리"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:J}]},{type:a,value:bN},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"\u003C="}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ag}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\n        \n        "},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"# 양방향 그래프 구성"}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:A}]},{type:a,value:bE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:" j "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bO},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bO},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"# 리프 노드 = 그래프에서 해당 키의 배열 요소 개수가 하나뿐인 노드"}]},{type:a,value:"\n        leaves "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:A}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"n "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aO}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:J}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:af}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n                leaves"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"# 루트 노드가 남을 때까지 반복해서 제거"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"# 마지막에 남는 노드는 1개 또는 2개가 될 수 있음"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ab}]},{type:a,value:bN},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:bK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n            n "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"-="}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"leaves"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n            new_leaves "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\n            \n            "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:A}]},{type:a,value:" leaf "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:" leaves"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n                neighbor "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n                graph"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"remove"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:J}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:af}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n                    new_leaves"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n\n            leaves "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:o}]},{type:a,value:" new_leaves\n\n        "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ag}]},{type:a,value:" leaves\n"}]}]}]},{type:a,value:i}]},{type:a,value:i}]},{type:a,value:i},{type:b,tag:X,props:{id:W},children:[{type:b,tag:x,props:{href:"#%EC%B6%9C%EC%B2%98",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:W}]},{type:a,value:i},{type:b,tag:R,props:{},children:[{type:a,value:i},{type:b,tag:I,props:{},children:[{type:a,value:"박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p416-424.\n"},{type:b,tag:R,props:{},children:[{type:a,value:i},{type:b,tag:I,props:{},children:[{type:b,tag:x,props:{href:"https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview",rel:[ai,aj,ak],target:al},children:[{type:a,value:"도서 정보"}]}]},{type:a,value:i},{type:b,tag:I,props:{},children:[{type:b,tag:x,props:{href:"https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview",rel:[ai,aj,ak],target:al},children:[{type:a,value:"GitHub"}]}]},{type:a,value:i}]},{type:a,value:i}]},{type:a,value:i}]}]},text:"\n## 문제 링크\n\nhttps:\u002F\u002Fleetcode.com\u002Fproblems\u002Fminimum-height-trees\u002F\n\n## 나의 풀이 (풀이 실패)\n\n### 첫 번째 시도 (시간 초과)\n\n- 트리 순회 결과를 우선순위 큐(힙)에 저장 후 높이가 가장 낮은 결과들만 추출하여 리턴하여 구현했으나 TLE가 떴다...\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nfrom typing import List\nimport collections, heapq\n\n\nclass MySolution1:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -\u003E List[int]:\n        graph = collections.defaultdict(list)\n        p_queue = []\n\n        # 그래프 구성\n        for s, t in edges:\n            graph[s].append(t)\n            graph[t].append(s)\n\n        for i in range(n):\n            visited = set()\n            stack = [(i, 0)]\n            max_length = 0\n\n            # 스택 루프\n            while stack:\n                curr_node, length = stack.pop()\n                visited.add(curr_node)\n\n                # 방문한 적 없는 노드만 스택에 추가\n                for next_node in graph[curr_node]:\n                    if next_node not in visited:\n                        stack.append((next_node, length + 1))\n\n                # 트리의 길이 갱신\n                max_length = max(max_length, length)\n\n            # 우선순위 큐에 추가\n            heapq.heappush(p_queue, (max_length, i))\n\n        # 우선순위 큐에서 길이가 최소인 루트 노드만 추출\n        # 하나뿐만 아니라 여러 개일 수도 있으므로 최소가 아닌 값이 나올 때까지 루프\n        min_node = heapq.heappop(p_queue)\n        result = [min_node[1]]\n        while p_queue:\n            length, i = heapq.heappop(p_queue)\n            if length == min_node[0]:\n                result.append(i)\n        return result\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n### 두 번째 시도 (시간 초과)\n\n- 우선순위 큐를 사용하는 대신 트리를 순회하면서 최소 높이의 트리만 루트 값을 `result` 리스트에 저장하기로 했으나, 마찬가지로 TLE가 뜨고 말았다. 우선순위 큐가 원인이 아니라 트리를 순회하는 부분이 문제인 듯 하다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nfrom typing import List\nimport collections, heapq\n\n\nclass MySolution2:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -\u003E List[int]:\n        graph = collections.defaultdict(list)\n        min_length = 2 * 10 ** 4\n        result = []\n\n        # 그래프 구성\n        for s, t in edges:\n            graph[s].append(t)\n            graph[t].append(s)\n\n        for i in range(n):\n            visited = set()\n            stack = [(i, 0)]\n            max_length = 0\n\n            # 스택 루프\n            while stack:\n                curr_node, length = stack.pop()\n                visited.add(curr_node)\n\n                # 방문한 적 없는 노드만 스택에 추가\n                for next_node in graph[curr_node]:\n                    if next_node not in visited:\n                        stack.append((next_node, length + 1))\n\n                # 트리의 길이 갱신\n                max_length = max(max_length, length)\n                \n            # 트리의 길이가 최소 길이보다 더 작을 때 해당 루트 노드로 result 리스트 초기화\n            # 최소 길이가 같은 루트 노드가 더 있다면 result 리스트에 추가\n            if max_length \u003C min_length:\n                min_length = max_length\n                result = [i]\n            elif max_length == min_length:\n                result.append(i)\n\n        return result\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 문제 풀이\n\n### 1. 단계별 리프 노드 제거\n\n- 최소 높이를 구성하려면 가장 가운데에 위치한 값이 루트여야 한다.\n- 즉, 리프 노드를 하나씩 제거하면서 남아 있는 값을 찾으면 해당 값이 가장 가운데에 있는 값이므로 해당 값을 루트로 하여 트리를 구성하면 높이가 최소인 트리를 구성할 수 있다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nfrom typing import List\nimport collections\n\n\nclass Solution1:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -\u003E List[int]:\n        # 예외 처리\n        if n \u003C= 1:\n            return [0]\n        \n        # 양방향 그래프 구성\n        graph = collections.defaultdict(list)\n        for i, j in edges:\n            graph[i].append(j)\n            graph[j].append(i)\n\n        # 리프 노드 = 그래프에서 해당 키의 배열 요소 개수가 하나뿐인 노드\n        leaves = []\n        for i in range(n + 1):\n            if len(graph[i]) == 1:\n                leaves.append(i)\n\n        # 루트 노드가 남을 때까지 반복해서 제거\n        # 마지막에 남는 노드는 1개 또는 2개가 될 수 있음\n        while n \u003E 2:\n            n -= len(leaves)\n            new_leaves = []\n            \n            for leaf in leaves:\n                neighbor = graph[leaf].pop()\n                graph[neighbor].remove(leaf)\n\n                if len(graph[neighbor]) == 1:\n                    new_leaves.append(neighbor)\n\n            leaves = new_leaves\n\n        return leaves\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 출처\n\n- 박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p416-424.\n  - [도서 정보](https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview)\n  - [GitHub](https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview)\n",dir:"\u002Fposts\u002F2021\u002F08\u002F20",path:"\u002Fposts\u002F2021\u002F08\u002F20\u002Fleetcode-310",extension:".md",createdAt:"2021-08-20T08:37:36.000Z",updatedAt:"2022-06-26T10:01:49.000Z"},isErrorPage:K,isDarkMode:K,isScrolled:K,isMobile:K,isTablet:K,hasHeaderImage:aT,isMobileMenuOpened:K,headerImage:"",perPage:10},serverRendered:aT,routePath:"\u002Fposts\u002Fleetcode-310",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:aU},content:{dbHash:"1ef82cd4"}},colorMode:{preference:bR,value:bR,unknown:aT,forced:K}}}("text","element","span","token","punctuation","keyword"," ","operator","\n","(",")",":","[","]","=",".",",","builtin","comment","number","append","\n        ","in","a","1","int","for","i","\n\n        ","\n            ","true",-1,"icon","icon-link","li","if",false,"div","import"," edges"," List","\n            graph","0","ul"," collections"," length ","\n\n                ",2,"출처","h2","code","\u003E","s","t"," i ","while"," stack","curr_node"," next_node ","==","return",3,"nofollow","noopener","noreferrer","_blank","h3","details","summary","소스 코드","nuxt-content-highlight","pre","language-python","line-numbers","from"," typing "," List\n","class","class-name","\n    ","def","function","findMinHeightTrees","self"," n","List","-","\n        graph ","defaultdict","list","range","\n\n            ","pop"," graph","+","max_length","p_queue","len","neighbor",true,null,"문제-링크","문제 링크","나의-풀이-풀이-실패","나의 풀이 (풀이 실패)","첫-번째-시도-시간-초과","첫 번째 시도 (시간 초과)","두-번째-시도-시간-초과","두 번째 시도 (시간 초과)","문제-풀이","문제 풀이","1-단계별-리프-노드-제거","1. 단계별 리프 노드 제거","https:\u002F\u002Fleetcode.com\u002Fproblems\u002Fminimum-height-trees\u002F"," heapq\n\n\n","# 그래프 구성"," s"," t ","n","\n            visited ","set","\n            stack ","\n            max_length ","# 스택 루프","\n                curr_node","\n                visited","add","# 방문한 적 없는 노드만 스택에 추가","\n                ","\n                    ","not"," visited","\n                        stack","next_node","# 트리의 길이 갱신","\n                max_length ","max"," length"," i"," heapq","heappop","\n        result ","\n                result"," result\n","2"," max_length "," min_length"," n ","j","graph","leaf","system"));