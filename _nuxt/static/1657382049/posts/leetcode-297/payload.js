__NUXT_JSONP__("/posts/leetcode-297", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br){aE.slug="leetcode-297";aE.description="Serialize and Deserialize Binary Tree";aE.title="LeetCode 297번 문제";aE.tags="algorithm, leetcode, python, tree, bfs";aE.toc=[{id:aF,depth:T,text:aG},{id:aH,depth:T,text:aI},{id:aJ,depth:T,text:aK},{id:aL,depth:3,text:aM},{id:U,depth:T,text:U}];aE.body={type:V,children:[{type:b,tag:W,props:{id:aF},children:[{type:b,tag:C,props:{href:"#%EB%AC%B8%EC%A0%9C-%EB%A7%81%ED%81%AC",ariaHidden:N,tabIndex:O},children:[{type:b,tag:c,props:{className:[P,Q]},children:[]}]},{type:a,value:aG}]},{type:a,value:m},{type:b,tag:"p",props:{},children:[{type:b,tag:C,props:{href:aN,rel:[as,at,au],target:av},children:[{type:a,value:aN}]}]},{type:a,value:m},{type:b,tag:W,props:{id:aH},children:[{type:b,tag:C,props:{href:"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4",ariaHidden:N,tabIndex:O},children:[{type:b,tag:c,props:{className:[P,Q]},children:[]}]},{type:a,value:aI}]},{type:a,value:m},{type:b,tag:aw,props:{},children:[{type:a,value:m},{type:b,tag:X,props:{},children:[{type:a,value:"직렬화의 결과로 문자열이 나와야 하지만, 아래 예시처럼 직렬화의 결과가 리스트여도 테스트 케이스는 무난하게 통과한다. 문자열로 변경해야 한다면 직렬화 메소드의 리턴 값을 "},{type:b,tag:ax,props:{},children:[{type:a,value:"''.join(result)"}]},{type:a,value:"으로 변경하면 된다."}]},{type:a,value:m}]},{type:a,value:m},{type:b,tag:aO,props:{},children:[{type:a,value:m},{type:b,tag:aP,props:{},children:[{type:a,value:aQ}]},{type:a,value:m},{type:b,tag:Y,props:{markdown:A},children:[{type:a,value:m},{type:b,tag:Y,props:{className:[aR]},children:[{type:b,tag:aS,props:{className:[aT,aU]},children:[{type:b,tag:ax,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aV}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:Z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,_]},children:[{type:a,value:aX}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aY}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:Z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,_]},children:[{type:a,value:"MySolution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:bb}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n        result"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:"list"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# BFS 수행"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ag}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:x}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:R}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:be}]},{type:a,value:"\n            result"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:bg},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:bg},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:al},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n            \n        "},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 배열의 뒷부분에 붙은 모든 None을 제거"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ag}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n            curr "},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"pop"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:x}]},{type:a,value:" curr "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:R}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:am}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"curr"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"break"}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:" result\n\n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:bi}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 직렬화 결과가 빈 리스트라면 역직렬화할 필요가 없음"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:x}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:am}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:a,value:"\n\n        result "},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"0"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 이전 노드의 왼쪽\u002F오른쪽 자식 노드를 동시에 처리"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"for"}]},{type:a,value:" i "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"in"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:"range"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:bk}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:bl}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:x}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:R}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:be}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 왼쪽 노드"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:x}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:R}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:am}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 오른쪽 노드"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:x}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"\u003C"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:bk}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"and"}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:R}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:am}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:"i "},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aA}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:al},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:" result\n"}]}]}]},{type:a,value:m}]},{type:a,value:m}]},{type:a,value:m},{type:b,tag:W,props:{id:aJ},children:[{type:b,tag:C,props:{href:"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4",ariaHidden:N,tabIndex:O},children:[{type:b,tag:c,props:{className:[P,Q]},children:[]}]},{type:a,value:aK}]},{type:a,value:m},{type:b,tag:"h3",props:{id:aL},children:[{type:b,tag:C,props:{href:"#1-%EC%A7%81%EB%A0%AC%ED%99%94--%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94-%EA%B5%AC%ED%98%84",ariaHidden:N,tabIndex:O},children:[{type:b,tag:c,props:{className:[P,Q]},children:[]}]},{type:a,value:aM}]},{type:a,value:m},{type:b,tag:aO,props:{},children:[{type:a,value:m},{type:b,tag:aP,props:{},children:[{type:a,value:aQ}]},{type:a,value:m},{type:b,tag:Y,props:{markdown:A},children:[{type:a,value:m},{type:b,tag:Y,props:{className:[aR]},children:[{type:b,tag:aS,props:{className:[aT,aU]},children:[{type:b,tag:ax,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aV}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:Z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,_]},children:[{type:a,value:aX}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aY}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:Z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,_]},children:[{type:a,value:"Solution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:bb}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bm}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bn}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 인덱스 0번은 None으로 고정"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 문자열에서 None을 표현할 수 없으므로 #으로 대체"}]},{type:a,value:"\n        result "},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 트리 BFS 직렬화"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ag}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:x}]},{type:a,value:" node"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:al},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n\n                "},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 미리 노드 값을 문자열 형식으로 변환 후 result에 추가"}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"else"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 뒤에 필요 없는 None(#)이 여러 개 붙지만 역직렬화 과정에서 딱히 문제될 일은 없음"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"' '"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"join"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n\n\n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:bi}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bm}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bn}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 예외 처리"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:x}]},{type:a,value:" data "},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"=="}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"'# #'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:t}]},{type:a,value:"\n\n        nodes "},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"split"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n\n        root "},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        index "},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:bl}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# 자식 노드 결과를 먼저 확인 후 큐 삽입 (런너 기법 참고)"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ag}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"# != 대신 is not을 쓰면 SyntaxWarning이 출력됨"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:x}]},{type:a,value:bo},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bp}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:br}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:A}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:x}]},{type:a,value:bo},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bp}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:n}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:al},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:br}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:A}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:" root\n"}]}]}]},{type:a,value:m}]},{type:a,value:m}]},{type:a,value:m},{type:b,tag:W,props:{id:U},children:[{type:b,tag:C,props:{href:"#%EC%B6%9C%EC%B2%98",ariaHidden:N,tabIndex:O},children:[{type:b,tag:c,props:{className:[P,Q]},children:[]}]},{type:a,value:U}]},{type:a,value:m},{type:b,tag:aw,props:{},children:[{type:a,value:m},{type:b,tag:X,props:{},children:[{type:a,value:"박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p406-412.\n"},{type:b,tag:aw,props:{},children:[{type:a,value:m},{type:b,tag:X,props:{},children:[{type:b,tag:C,props:{href:"https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview",rel:[as,at,au],target:av},children:[{type:a,value:"도서 정보"}]}]},{type:a,value:m},{type:b,tag:X,props:{},children:[{type:b,tag:C,props:{href:"https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview",rel:[as,at,au],target:av},children:[{type:a,value:"GitHub"}]}]},{type:a,value:m}]},{type:a,value:m}]},{type:a,value:m}]}]};aE.text="\n## 문제 링크\n\nhttps:\u002F\u002Fleetcode.com\u002Fproblems\u002Fserialize-and-deserialize-binary-tree\u002F\n\n## 나의 풀이\n\n- 직렬화의 결과로 문자열이 나와야 하지만, 아래 예시처럼 직렬화의 결과가 리스트여도 테스트 케이스는 무난하게 통과한다. 문자열로 변경해야 한다면 직렬화 메소드의 리턴 값을 `''.join(result)`으로 변경하면 된다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nimport collections\n\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass MySolution1:\n    def serialize(self, root):\n        result: list = []\n        queue = collections.deque([root])\n\n        # BFS 수행\n        while queue:\n            node = queue.popleft()\n            if node is None:\n                result.append(None)\n                continue\n            result.append(node.val)\n            queue.append(node.left)\n            queue.append(node.right)\n            \n        # 배열의 뒷부분에 붙은 모든 None을 제거\n        while result:\n            curr = result.pop()\n            if curr is not None:\n                result.append(curr)\n                break\n\n        return result\n\n    def deserialize(self, data):\n        # 직렬화 결과가 빈 리스트라면 역직렬화할 필요가 없음\n        if not data:\n            return None\n\n        result = TreeNode(data[0])\n        queue = collections.deque([result])\n\n        # 이전 노드의 왼쪽\u002F오른쪽 자식 노드를 동시에 처리\n        for i in range(1, len(data), 2):\n            node = queue.popleft()\n            if node is None:\n                continue\n\n            # 왼쪽 노드\n            if data[i] is not None:\n                node.left = TreeNode(data[i])\n                queue.append(node.left)\n            # 오른쪽 노드\n            if (i+1) \u003C len(data) and data[i+1] is not None:\n                node.right = TreeNode(data[i + 1])\n                queue.append(node.right)\n\n        return result\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 문제 풀이\n\n### 1. 직렬화 & 역직렬화 구현\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nimport collections\n\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution1:\n    def serialize(self, root: TreeNode) -\u003E str:\n        queue = collections.deque([root])\n\n        # 인덱스 0번은 None으로 고정\n        # 문자열에서 None을 표현할 수 없으므로 #으로 대체\n        result = ['#']\n\n        # 트리 BFS 직렬화\n        while queue:\n            node = queue.popleft()\n            if node:\n                queue.append(node.left)\n                queue.append(node.right)\n\n                # 미리 노드 값을 문자열 형식으로 변환 후 result에 추가\n                result.append(str(node.val))\n            else:\n                result.append('#')\n\n        # 뒤에 필요 없는 None(#)이 여러 개 붙지만 역직렬화 과정에서 딱히 문제될 일은 없음\n        return ' '.join(result)\n\n\n    def deserialize(self, data: str) -\u003E TreeNode:\n        # 예외 처리\n        if data == '# #':\n            return None\n\n        nodes = data.split()\n\n        root = TreeNode(int(nodes[1]))\n        queue = collections.deque([root])\n        index = 2\n\n        # 자식 노드 결과를 먼저 확인 후 큐 삽입 (런너 기법 참고)\n        while queue:\n            node = queue.popleft()\n\n            # != 대신 is not을 쓰면 SyntaxWarning이 출력됨\n            if nodes[index] != '#':\n                node.left = TreeNode(int(nodes[index]))\n                queue.append(node.left)\n            index += 1\n\n            if nodes[index] != '#':\n                node.right = TreeNode(int(nodes[index]))\n                queue.append(node.right)\n            index += 1\n\n        return root\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 출처\n\n- 박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p406-412.\n  - [도서 정보](https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview)\n  - [GitHub](https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview)\n";aE.dir="\u002Fposts\u002F2021\u002F08\u002F18";aE.path="\u002Fposts\u002F2021\u002F08\u002F18\u002Fleetcode-297";aE.extension=".md";aE.createdAt=ar;aE.updatedAt=ar;return {data:[{post:aE,prev:{slug:"leetcode-310",title:"LeetCode 310번 문제",createdAt:ar},next:{slug:"leetcode-110",title:"LeetCode 110번 문제",createdAt:ar}}],fetch:{},mutations:[["SET_POST",aE],["SET_HEADER_IMAGE_STATE",true],["SET_SCROLL_STATE",false]]}}("text","element","span","token","punctuation"," ","keyword","(",")",".","operator",":","\n","=","[","]","comment","append","boolean","None","\n        ","\n            ","builtin","if","node","number","1","\n\n        ","a",","," TreeNode"," queue","def","function","self","return"," data","\n                queue","string","true",-1,"icon","icon-link","is","data",2,"출처","root","h2","li","div","class","class-name","\n    ","\n        self","left ","right ","\n        queue "," collections","deque","while","\n            node ","popleft","\n                result","left","right","not","i","\n                node","'#'","index","2022-07-09T15:52:22.000Z","nofollow","noopener","noreferrer","_blank","ul","code","\n                ","\n\n            ","+","str","int","nodes",{},"문제-링크","문제 링크","나의-풀이","나의 풀이","문제-풀이","문제 풀이","1-직렬화--역직렬화-구현","1. 직렬화 & 역직렬화 구현","https:\u002F\u002Fleetcode.com\u002Fproblems\u002Fserialize-and-deserialize-binary-tree\u002F","details","summary","소스 코드","nuxt-content-highlight","pre","language-python","line-numbers","import"," collections\n\n\n","TreeNode","__init__"," x","val "," x\n        self","\n\n\n","serialize"," root"," node ","continue","val","\n            queue"," result","deserialize","result","len","2","-","\u003E"," nodes","!=","\n            index ","+=")));