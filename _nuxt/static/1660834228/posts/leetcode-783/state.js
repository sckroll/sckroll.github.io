window.__NUXT__=(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1660834228",layout:"default",error:aI,state:{post:{slug:"leetcode-783",description:"Minimum Distance Between BST Nodes",title:"LeetCode 783번 문제",tags:"algorithm, leetcode, python, tree, bst",toc:[{id:aJ,depth:S,text:aK},{id:aL,depth:S,text:aM},{id:aN,depth:S,text:aO},{id:aP,depth:aQ,text:aR},{id:aS,depth:aQ,text:aT},{id:T,depth:S,text:T}],body:{type:q,children:[{type:b,tag:U,props:{id:aJ},children:[{type:b,tag:r,props:{href:"#%EB%AC%B8%EC%A0%9C-%EB%A7%81%ED%81%AC",ariaHidden:B,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:aK}]},{type:a,value:h},{type:b,tag:"p",props:{},children:[{type:b,tag:r,props:{href:aU,rel:[ae,af,ag],target:ah},children:[{type:a,value:aU}]}]},{type:a,value:h},{type:b,tag:U,props:{id:aL},children:[{type:b,tag:r,props:{href:"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4-%ED%92%80%EC%9D%B4-%EC%8B%A4%ED%8C%A8",ariaHidden:B,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:aM}]},{type:a,value:h},{type:b,tag:V,props:{},children:[{type:a,value:h},{type:b,tag:F,props:{},children:[{type:a,value:"도저히 풀이 방법이 떠오르지 않아 다음에 다시 재도전하기로 했다."}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:ai,props:{},children:[{type:a,value:h},{type:b,tag:aj,props:{},children:[{type:a,value:ak}]},{type:a,value:h},{type:b,tag:G,props:{markdown:al},children:[{type:a,value:h},{type:b,tag:G,props:{className:[am]},children:[{type:b,tag:an,props:{className:[ao,ap]},children:[{type:b,tag:aq,props:{},children:[{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:ar}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:P}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:H}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:J}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:v}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:au}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:H}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:"MySolution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:v}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:J},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aD}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:v}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:"dfs"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:" TreeNode"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:$}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n                left "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:aV},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aX},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aY}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:$}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n                right "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:aV},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aX},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aY}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:ad}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"# 조건 최대치인 10^5으로 초기화"}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:"10"}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"**"}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:"5"}]},{type:a,value:"\n        dfs"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:ad}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"min_distance\n"}]}]}]},{type:a,value:h}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:U,props:{id:aN},children:[{type:b,tag:r,props:{href:"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4",ariaHidden:B,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:aO}]},{type:a,value:h},{type:b,tag:a_,props:{id:aP},children:[{type:b,tag:r,props:{href:"#1-%EC%9E%AC%EA%B7%80-%EA%B5%AC%EC%A1%B0%EB%A1%9C-%EC%A4%91%EC%9C%84-%EC%88%9C%ED%9A%8C",ariaHidden:B,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:aR}]},{type:a,value:h},{type:b,tag:V,props:{},children:[{type:a,value:h},{type:b,tag:F,props:{},children:[{type:a,value:"루트 노드와 가장 차이가 작을 수 있는 노드는 왼쪽 자식 노드의 오른쪽 끝 자식 노드와 오른쪽 자식 노드의 왼쪽 끝 자식 노드가 해당된다."}]},{type:a,value:h},{type:b,tag:F,props:{},children:[{type:a,value:"중위 순회를 하다 보면 위의 두 노드와 루트 노드를 자동으로 비교하게 된다."}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:ai,props:{},children:[{type:a,value:h},{type:b,tag:aj,props:{},children:[{type:a,value:ak}]},{type:a,value:h},{type:b,tag:G,props:{markdown:al},children:[{type:a,value:h},{type:b,tag:G,props:{className:[am]},children:[{type:b,tag:an,props:{className:[ao,ap]},children:[{type:b,tag:aq,props:{},children:[{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:P}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:ar}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:P}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:H}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:J}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:v}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:au}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:H}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:"Solution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n    prev "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"maxsize\n    result "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:bb},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"maxsize\n\n    "},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"# 재귀 구조 중위 순회 비교 결과"}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:v}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:J},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aD}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:$}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"# 전위에 위치한 노드가 현재의 루트 노드보다 크기가 작으므로 abs()를 쓸 필요가 없음"}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"# 처음 아래 코드에 접근했을 때 result 변수는 sys.maxsize가 나오지만,"}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"# prev 변수가 현재 노드 값으로 재할당된 후 다음 순회 과정에서 result 변수는 정상적인 범위의 값으로 바뀌게 됨"}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"# (애초에 입력 조건에 적어도 노드가 2개 이상 존재한다고 명시되어 있음)"}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"result "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"prev"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"prev "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:$}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:ad}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"result\n"}]}]}]},{type:a,value:h}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:a_,props:{id:aS},children:[{type:b,tag:r,props:{href:"#2-%EB%B0%98%EB%B3%B5-%EA%B5%AC%EC%A1%B0%EB%A1%9C-%EC%A4%91%EC%9C%84-%EC%88%9C%ED%9A%8C",ariaHidden:B,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:aT}]},{type:a,value:h},{type:b,tag:ai,props:{},children:[{type:a,value:h},{type:b,tag:aj,props:{},children:[{type:a,value:ak}]},{type:a,value:h},{type:b,tag:G,props:{markdown:al},children:[{type:a,value:h},{type:b,tag:G,props:{className:[am]},children:[{type:b,tag:an,props:{className:[ao,ap]},children:[{type:b,tag:aq,props:{},children:[{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:P}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:ar}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:P}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:H}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:J}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:v}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:au}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:H}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:"Solution2"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:v}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:a,value:J},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aD}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n        prev "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"maxsize\n        result "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:bb},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"maxsize\n\n        stack "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:Z}]},{type:a,value:"\n        node "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" root\n\n        "},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"# 반복 구조 중위 순회 비교 결과"}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:bf}]},{type:a,value:" stack "},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"or"}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:bf}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n                stack"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"append"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"node"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\n                node "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"left\n\n            node "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" stack"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"pop"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\n\n            result "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:" prev"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\n            prev "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"val\n\n            node "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"right\n\n        "},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:ad}]},{type:a,value:" result\n"}]}]}]},{type:a,value:h}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:U,props:{id:T},children:[{type:b,tag:r,props:{href:"#%EC%B6%9C%EC%B2%98",ariaHidden:B,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:T}]},{type:a,value:h},{type:b,tag:V,props:{},children:[{type:a,value:h},{type:b,tag:F,props:{},children:[{type:a,value:"박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p435-443.\n"},{type:b,tag:V,props:{},children:[{type:a,value:h},{type:b,tag:F,props:{},children:[{type:b,tag:r,props:{href:"https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview",rel:[ae,af,ag],target:ah},children:[{type:a,value:"도서 정보"}]}]},{type:a,value:h},{type:b,tag:F,props:{},children:[{type:b,tag:r,props:{href:"https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview",rel:[ae,af,ag],target:ah},children:[{type:a,value:"GitHub"}]}]},{type:a,value:h}]},{type:a,value:h}]},{type:a,value:h}]}]},text:"\n## 문제 링크\n\nhttps:\u002F\u002Fleetcode.com\u002Fproblems\u002Fminimum-distance-between-bst-nodes\u002F\n\n## 나의 풀이 (풀이 실패)\n\n- 도저히 풀이 방법이 떠오르지 않아 다음에 다시 재도전하기로 했다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nfrom typing import Optional\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass MySolution1:\n    def minDiffInBST(self, root: Optional[TreeNode]) -\u003E int:\n        def dfs(root: TreeNode):\n            if root.left:\n                left = dfs(root.left)\n                self.min_distance = min(self.min_distance, abs(root.val - left))\n            if root.right:\n                right = dfs(root.right)\n                self.min_distance = min(self.min_distance, abs(root.val - right))\n            return root.val\n\n        # 조건 최대치인 10^5으로 초기화\n        self.min_distance = 10 ** 5\n        dfs(root)\n        return self.min_distance\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 문제 풀이\n\n### 1. 재귀 구조로 중위 순회\n\n- 루트 노드와 가장 차이가 작을 수 있는 노드는 왼쪽 자식 노드의 오른쪽 끝 자식 노드와 오른쪽 자식 노드의 왼쪽 끝 자식 노드가 해당된다.\n- 중위 순회를 하다 보면 위의 두 노드와 루트 노드를 자동으로 비교하게 된다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nimport sys\nfrom typing import Optional\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution1:\n    prev = -sys.maxsize\n    result = sys.maxsize\n\n    # 재귀 구조 중위 순회 비교 결과\n    def minDiffInBST(self, root: Optional[TreeNode]) -\u003E int:\n        if root.left:\n            self.minDiffInBST(root.left)\n\n        # 전위에 위치한 노드가 현재의 루트 노드보다 크기가 작으므로 abs()를 쓸 필요가 없음\n        # 처음 아래 코드에 접근했을 때 result 변수는 sys.maxsize가 나오지만,\n        # prev 변수가 현재 노드 값으로 재할당된 후 다음 순회 과정에서 result 변수는 정상적인 범위의 값으로 바뀌게 됨\n        # (애초에 입력 조건에 적어도 노드가 2개 이상 존재한다고 명시되어 있음)\n        self.result = min(self.result, root.val - self.prev)\n        self.prev = root.val\n\n        if root.right:\n            self.minDiffInBST(root.right)\n\n        return self.result\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n### 2. 반복 구조로 중위 순회\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n\n```python\nimport sys\nfrom typing import Optional\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution2:\n    def minDiffInBST(self, root: Optional[TreeNode]) -\u003E int:\n        prev = -sys.maxsize\n        result = sys.maxsize\n\n        stack = []\n        node = root\n\n        # 반복 구조 중위 순회 비교 결과\n        while stack or node:\n            while node:\n                stack.append(node)\n                node = node.left\n\n            node = stack.pop()\n\n            result = min(result, node.val - prev)\n            prev = node.val\n\n            node = node.right\n\n        return result\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 출처\n\n- 박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p435-443.\n  - [도서 정보](https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview)\n  - [GitHub](https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview)\n",dir:"\u002Fposts\u002F2021\u002F08\u002F25",path:"\u002Fposts\u002F2021\u002F08\u002F25\u002Fleetcode-783",extension:".md",createdAt:"2021-08-25T12:03:24.000Z",updatedAt:"2022-06-26T10:01:49.000Z"},isErrorPage:A,isDarkMode:A,isScrolled:A,isMobile:A,isTablet:A,hasHeaderImage:aH,isMobileMenuOpened:A,headerImage:"",perPage:10},serverRendered:aH,routePath:"\u002Fposts\u002Fleetcode-783",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:aI},content:{dbHash:"a24fa2a6"}},colorMode:{preference:bg,value:bg,unknown:aH,forced:A}}}("text","element","span","token","punctuation","operator",".","\n","=","keyword"," ",":","(",")",","," root","root","a","self","-","builtin","def","function","val ","\n        ","comment",false,"true",-1,"icon","icon-link","li","div","class","class-name","TreeNode","\n    ","boolean","None","\n        self"," node","import","number","minDiffInBST",2,"출처","h2","ul"," left"," right","[","]","\n            ","if","left","min","right","return","nofollow","noopener","noreferrer","_blank","details","summary","소스 코드","1","nuxt-content-highlight","pre","language-python","line-numbers","code","from"," typing "," Optional\n\n\n","__init__"," val","0"," val\n        self","left "," left\n        self","right "," right\n\n\n"," Optional","\u003E","int","min_distance "," self",true,null,"문제-링크","문제 링크","나의-풀이-풀이-실패","나의 풀이 (풀이 실패)","문제-풀이","문제 풀이","1-재귀-구조로-중위-순회",3,"1. 재귀 구조로 중위 순회","2-반복-구조로-중위-순회","2. 반복 구조로 중위 순회","https:\u002F\u002Fleetcode.com\u002Fproblems\u002Fminimum-distance-between-bst-nodes\u002F"," dfs","\n                self","min_distance","abs","val\n\n        ","h3"," sys\n","sys"," sys","\n            self","\n\n        ","result","while","system"));