window.__NUXT__=(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1660745533",layout:"default",error:aK,state:{post:{slug:"leetcode-105",description:"Construct Binary Tree from Preorder and Inorder Traversal",title:"LeetCode 105번 문제",tags:"algorithm, leetcode, python, tree, bst, divide_and_conquer",toc:[{id:aL,depth:_,text:aM},{id:aN,depth:_,text:aO},{id:aP,depth:_,text:aQ},{id:aR,depth:aS,text:aT},{id:aU,depth:aS,text:aV},{id:$,depth:_,text:$}],body:{type:aW,children:[{type:b,tag:aa,props:{id:aL},children:[{type:b,tag:v,props:{href:"#%EB%AC%B8%EC%A0%9C-%EB%A7%81%ED%81%AC",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:aM}]},{type:a,value:f},{type:b,tag:"p",props:{},children:[{type:b,tag:v,props:{href:aX,rel:[ae,af,ag],target:ah},children:[{type:a,value:aX}]}]},{type:a,value:f},{type:b,tag:aa,props:{id:aN},children:[{type:b,tag:v,props:{href:"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4-%ED%92%80%EC%9D%B4-%EC%8B%A4%ED%8C%A8",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:aO}]},{type:a,value:f},{type:b,tag:U,props:{},children:[{type:a,value:f},{type:b,tag:w,props:{},children:[{type:a,value:"전위 순회와 중위 순회를 동시에 활용할 방법이 떠오르지 않아 풀 수가 없었다."}]},{type:a,value:f},{type:b,tag:w,props:{},children:[{type:a,value:"아래 코드는 전위 순회로만 트리를 구성하는 과정을 구현한 것이다. 당연하지만 중위 순회 결과와는 일치하지 않는다."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:ai,props:{},children:[{type:a,value:f},{type:b,tag:aj,props:{},children:[{type:a,value:ak}]},{type:a,value:f},{type:b,tag:H,props:{markdown:x},children:[{type:a,value:f},{type:b,tag:H,props:{className:[al]},children:[{type:b,tag:am,props:{className:[an,ao]},children:[{type:b,tag:ap,props:{},children:[{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:V}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aq}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:V}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:J}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:A}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:J}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:"MySolution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:A}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"\n        root "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n        queue "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"for"}]},{type:a,value:" i "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"in"}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"range"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bb}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"2"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ab}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"not"}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"break"}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n            queue"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bg},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"left"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ab}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"\u003C"}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:bb}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n                queue"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bg},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"right"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ad}]},{type:a,value:" root\n"}]}]}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:aa,props:{id:aP},children:[{type:b,tag:v,props:{href:"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:aQ}]},{type:a,value:f},{type:b,tag:bi,props:{id:aR},children:[{type:b,tag:v,props:{href:"#1-%EC%A0%84%EC%9C%84-%EC%88%9C%ED%9A%8C-%EA%B2%B0%EA%B3%BC%EB%A1%9C-%EC%A4%91%EC%9C%84-%EC%88%9C%ED%9A%8C-%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:aT}]},{type:a,value:f},{type:b,tag:U,props:{},children:[{type:a,value:f},{type:b,tag:w,props:{},children:[{type:a,value:"전위 순회의 첫 번째 값은 부모 노드이므로 정확히 중위 순회 결과를 왼쪽과 오른쪽으로 분할시키는 역할을 한다."}]},{type:a,value:f},{type:b,tag:w,props:{},children:[{type:a,value:"만약 분할된 전위 순회 결과의 첫 번째 노드가 분할된 중위 순회 결과의 마지막에 위치해 있다면, 해당 노드의 오른쪽 자식 노드는 존재하지 않는다는 의미이다."}]},{type:a,value:f},{type:b,tag:w,props:{},children:[{type:a,value:"마찬가지로 전위 순회 결과의 첫 번째 노드가 분할된 중위 순회 결과의 첫 번째에 위치해 있다면, 해당 노드의 왼쪽 자식 노드는 존재하지 않는다."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:ai,props:{},children:[{type:a,value:f},{type:b,tag:aj,props:{},children:[{type:a,value:ak}]},{type:a,value:f},{type:b,tag:H,props:{markdown:x},children:[{type:a,value:f},{type:b,tag:H,props:{className:[al]},children:[{type:b,tag:am,props:{className:[an,ao]},children:[{type:b,tag:ap,props:{},children:[{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aq}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:V}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:J}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:A}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:J}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:"Solution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:A}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ab}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:bj}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:"# 시간 복잡도를 위해서 pop(0) 대신 Deque를 사용하는 것이 더 좋음"}]},{type:a,value:"\n            index "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"pop"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:bl}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bm},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bo},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ac}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ad}]},{type:a,value:" node\n"}]}]}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:bi,props:{id:aU},children:[{type:b,tag:v,props:{href:"#2-%ED%92%80%EC%9D%B4-1%EC%9D%98-preorder%EB%A5%BC-deque%EB%A1%9C-%EB%B3%80%ED%99%98-%ED%9B%84-%EC%82%AC%EC%9A%A9",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:aV}]},{type:a,value:f},{type:b,tag:U,props:{},children:[{type:a,value:f},{type:b,tag:w,props:{},children:[{type:a,value:"책에는 예시가 없어서 직접 구현해보았다."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:ai,props:{},children:[{type:a,value:f},{type:b,tag:aj,props:{},children:[{type:a,value:ak}]},{type:a,value:f},{type:b,tag:H,props:{markdown:x},children:[{type:a,value:f},{type:b,tag:H,props:{className:[al]},children:[{type:b,tag:am,props:{className:[an,ao]},children:[{type:b,tag:ap,props:{},children:[{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:V}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aq}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:V}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:" Deque\n\n\n"},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:J}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:A}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:J}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:"Solution2"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:A}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:A}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"dfs"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:" Deque"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ab}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:bj}]},{type:a,value:"\n                index "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bp},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:bl}]},{type:a,value:"\n                node "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bm},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bo},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ac}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ad}]},{type:a,value:" node\n\n        preorder_queue "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:i}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ad}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bp},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:f}]}]}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:aa,props:{id:$},children:[{type:b,tag:v,props:{href:"#%EC%B6%9C%EC%B2%98",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:$}]},{type:a,value:f},{type:b,tag:U,props:{},children:[{type:a,value:f},{type:b,tag:w,props:{},children:[{type:a,value:"박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p444-445.\n"},{type:b,tag:U,props:{},children:[{type:a,value:f},{type:b,tag:w,props:{},children:[{type:b,tag:v,props:{href:"https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview",rel:[ae,af,ag],target:ah},children:[{type:a,value:"도서 정보"}]}]},{type:a,value:f},{type:b,tag:w,props:{},children:[{type:b,tag:v,props:{href:"https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview",rel:[ae,af,ag],target:ah},children:[{type:a,value:"GitHub"}]}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f}]}]},text:"\n## 문제 링크\n\nhttps:\u002F\u002Fleetcode.com\u002Fproblems\u002Fconstruct-binary-tree-from-preorder-and-inorder-traversal\u002F\n\n## 나의 풀이 (풀이 실패)\n\n- 전위 순회와 중위 순회를 동시에 활용할 방법이 떠오르지 않아 풀 수가 없었다.\n- 아래 코드는 전위 순회로만 트리를 구성하는 과정을 구현한 것이다. 당연하지만 중위 순회 결과와는 일치하지 않는다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nimport collections\nfrom typing import Optional, List\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass MySolution1:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -\u003E Optional[TreeNode]:\n        root = TreeNode(preorder[0])\n        queue = collections.deque([root])\n\n        for i in range(1, len(preorder), 2):\n            if not queue:\n                break\n            node = queue.popleft()\n            node.left = TreeNode(preorder[i])\n            queue.append(node.left)\n            if (i+1) \u003C len(preorder):\n                node.right = TreeNode(preorder[i+1])\n                queue.append(node.right)\n\n        return root\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 문제 풀이\n\n### 1. 전위 순회 결과로 중위 순회 분할 정복\n\n- 전위 순회의 첫 번째 값은 부모 노드이므로 정확히 중위 순회 결과를 왼쪽과 오른쪽으로 분할시키는 역할을 한다.\n- 만약 분할된 전위 순회 결과의 첫 번째 노드가 분할된 중위 순회 결과의 마지막에 위치해 있다면, 해당 노드의 오른쪽 자식 노드는 존재하지 않는다는 의미이다.\n- 마찬가지로 전위 순회 결과의 첫 번째 노드가 분할된 중위 순회 결과의 첫 번째에 위치해 있다면, 해당 노드의 왼쪽 자식 노드는 존재하지 않는다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nfrom typing import Optional, List\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution1:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -\u003E Optional[TreeNode]:\n        if inorder:\n            # 전위 순회 결과는 중위 순회 분할 인덱스\n            # 시간 복잡도를 위해서 pop(0) 대신 Deque를 사용하는 것이 더 좋음\n            index = inorder.index(preorder.pop(0))\n\n            # 중위 순회 결과 분할 정복\n            node = TreeNode(inorder[index])\n            node.left = self.buildTree(preorder, inorder[0:index])\n            node.right = self.buildTree(preorder, inorder[index + 1:])\n\n            return node\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n### 2. 풀이 1의 preorder를 Deque로 변환 후 사용\n\n- 책에는 예시가 없어서 직접 구현해보았다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nimport collections\nfrom typing import Optional, List, Deque\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution2:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -\u003E Optional[TreeNode]:\n        def dfs(preorder: Deque[int], inorder: List[int]):\n            if inorder:\n                # 전위 순회 결과는 중위 순회 분할 인덱스\n                index = inorder.index(preorder_queue.popleft())\n\n                # 중위 순회 결과 분할 정복\n                node = TreeNode(inorder[index])\n                node.left = dfs(preorder, inorder[:index])\n                node.right = dfs(preorder, inorder[index + 1:])\n\n                return node\n\n        preorder_queue = collections.deque(preorder)\n        return dfs(preorder_queue, inorder)\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 출처\n\n- 박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p444-445.\n  - [도서 정보](https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview)\n  - [GitHub](https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview)\n",dir:"\u002Fposts\u002F2021\u002F08\u002F25",path:"\u002Fposts\u002F2021\u002F08\u002F25\u002Fleetcode-105",extension:".md",createdAt:"2021-08-25T13:37:12.000Z",updatedAt:"2022-06-26T10:01:49.000Z"},isErrorPage:C,isDarkMode:C,isScrolled:C,isMobile:C,isTablet:C,hasHeaderImage:aJ,isMobileMenuOpened:C,headerImage:"",perPage:10},serverRendered:aJ,routePath:"\u002Fposts\u002Fleetcode-105",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:aK},content:{dbHash:"08de5a73"}},colorMode:{preference:br,value:br,unknown:aJ,forced:C}}}("text","element","span","token","punctuation","\n","operator","keyword","=",":","(",")",".",","," ","[","]"," inorder","number","preorder","builtin","a","li","1"," List","int","def","function",false,"true",-1,"icon","icon-link","div"," Optional","class","class-name","TreeNode","\n    ","self","0","boolean","None","left ","right ","index","ul","import","buildTree"," TreeNode","\n            ","comment",2,"출처","h2","if","+","return","nofollow","noopener","noreferrer","_blank","details","summary","소스 코드","nuxt-content-highlight","pre","language-python","line-numbers","code","from"," typing ","__init__"," val"," left"," right","\n        self","val "," val\n        self"," left\n        self"," right\n\n\n"," preorder","-","\u003E","\n            node","i","\n                node","\n        "," dfs",true,null,"문제-링크","문제 링크","나의-풀이-풀이-실패","나의 풀이 (풀이 실패)","문제-풀이","문제 풀이","1-전위-순회-결과로-중위-순회-분할-정복",3,"1. 전위 순회 결과로 중위 순회 분할 정복","2-풀이-1의-preorder를-deque로-변환-후-사용","2. 풀이 1의 preorder를 Deque로 변환 후 사용","root","https:\u002F\u002Fleetcode.com\u002Fproblems\u002Fconstruct-binary-tree-from-preorder-and-inorder-traversal\u002F"," collections\n"," List\n\n\n"," collections","deque","\n\n        ","len"," queue","\n                ","\n            node ","popleft","append","node","h3","# 전위 순회 결과는 중위 순회 분할 인덱스","\n\n            ","# 중위 순회 결과 분할 정복","inorder"," self","index ","preorder_queue","\n\n                ","system"));