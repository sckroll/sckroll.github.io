window.__NUXT__=(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1659364484",layout:"default",error:aJ,state:{post:{slug:aK,description:"Merge k Sorted Lists",title:"LeetCode 23번 문제",tags:"algorithm, leetcode, python, priority_queue, heap",toc:[{id:aL,depth:M,text:aM},{id:aN,depth:M,text:aO},{id:aP,depth:Z,text:aQ},{id:aR,depth:Z,text:aS},{id:aT,depth:M,text:aU},{id:aV,depth:Z,text:aW},{id:aX,depth:M,text:aY},{id:aZ,depth:Z,text:a_},{id:_,depth:M,text:_}],body:{type:"root",children:[{type:b,tag:N,props:{id:aL},children:[{type:b,tag:u,props:{href:"#%EB%AC%B8%EC%A0%9C-%EB%A7%81%ED%81%AC",ariaHidden:x,tabIndex:y},children:[{type:b,tag:c,props:{className:[z,A]},children:[]}]},{type:a,value:aM}]},{type:a,value:f},{type:b,tag:a$,props:{},children:[{type:b,tag:u,props:{href:ba,rel:[af,ag,ah],target:ai},children:[{type:a,value:ba}]}]},{type:a,value:f},{type:b,tag:N,props:{id:aN},children:[{type:b,tag:u,props:{href:"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4",ariaHidden:x,tabIndex:y},children:[{type:b,tag:c,props:{className:[z,A]},children:[]}]},{type:a,value:aO}]},{type:a,value:f},{type:b,tag:$,props:{id:aP},children:[{type:b,tag:u,props:{href:"#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84-%EC%8B%9C%EA%B0%84-%EC%B4%88%EA%B3%BC",ariaHidden:x,tabIndex:y},children:[{type:b,tag:c,props:{className:[z,A]},children:[]}]},{type:a,value:aQ}]},{type:a,value:f},{type:b,tag:B,props:{},children:[{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"매 루프마다 각 연결 리스트의 head value를 리스트로 저장하고, 최솟값에 해당하는 연결 리스트의 값을 "},{type:b,tag:v,props:{},children:[{type:a,value:bb}]},{type:a,value:"에 저장 후 갱신하는 방법을 사용했다."}]},{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"결과는 이상이 없지만 시간 초과로 인하여 오답 처리가 되었다."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:aj,props:{},children:[{type:a,value:f},{type:b,tag:ak,props:{},children:[{type:a,value:al}]},{type:a,value:f},{type:b,tag:G,props:{markdown:H},children:[{type:a,value:f},{type:b,tag:G,props:{className:[am]},children:[{type:b,tag:an,props:{className:[ao,ap]},children:[{type:b,tag:v,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aq}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:as}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,at]},children:[{type:a,value:bd}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:av}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,aw]},children:[{type:a,value:"my_solution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aB}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:C}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:be}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bg},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aC}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:H}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:"\n            curr "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:C}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:R}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aE}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n            min_value "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:bj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:C}]},{type:a,value:bl},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bm}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:"\n                idx "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" curr"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"index"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"min_value"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bo},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bp},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:br}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:f}]}]}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:$,props:{id:aR},children:[{type:b,tag:u,props:{href:"#%EB%91%90-%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84",ariaHidden:x,tabIndex:y},children:[{type:b,tag:c,props:{className:[z,A]},children:[]}]},{type:a,value:aS}]},{type:a,value:f},{type:b,tag:B,props:{},children:[{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"매 루프마다 각 연결 리스트의 head value를 리스트로 저장하는 방법 대신 루프 이전에 미리 리스트를 생성해놓고, 최솟값을 찾으면 해당 인덱스의 값을 변경하는 방법을 사용했다."}]},{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"무사히 통과는 했으나, 여전히 느리다."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:aj,props:{},children:[{type:a,value:f},{type:b,tag:ak,props:{},children:[{type:a,value:al}]},{type:a,value:f},{type:b,tag:G,props:{markdown:H},children:[{type:a,value:f},{type:b,tag:G,props:{className:[am]},children:[{type:b,tag:an,props:{className:[ao,ap]},children:[{type:b,tag:v,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aq}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:as}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,at]},children:[{type:a,value:bd}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:av}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,aw]},children:[{type:a,value:"my_solution2"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aB}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:C}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:be}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bg},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        curr "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:C}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:R}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aE}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:"enumerate"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aC}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:H}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:"\n            min_value"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:" min_idx "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:bj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:" key"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"lambda"}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:bt}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:C}]},{type:a,value:bl},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bm}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bo},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bp},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:"\n                curr"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:bt}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:R}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:br}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:f}]}]}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:N,props:{id:aT},children:[{type:b,tag:u,props:{href:"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4",ariaHidden:x,tabIndex:y},children:[{type:b,tag:c,props:{className:[z,A]},children:[]}]},{type:a,value:aU}]},{type:a,value:f},{type:b,tag:$,props:{id:aV},children:[{type:b,tag:u,props:{href:"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%B3%91%ED%95%A9",ariaHidden:x,tabIndex:y},children:[{type:b,tag:c,props:{className:[z,A]},children:[]}]},{type:a,value:aW}]},{type:a,value:f},{type:b,tag:B,props:{},children:[{type:a,value:f},{type:b,tag:r,props:{},children:[{type:b,tag:v,props:{},children:[{type:a,value:L}]},{type:a,value:" 모듈(최소 힙)을 사용하여 간단하게 해결할 수 있음"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:aj,props:{},children:[{type:a,value:f},{type:b,tag:ak,props:{},children:[{type:a,value:al}]},{type:a,value:f},{type:b,tag:G,props:{markdown:H},children:[{type:a,value:f},{type:b,tag:G,props:{className:[am]},children:[{type:b,tag:an,props:{className:[ao,ap]},children:[{type:b,tag:v,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aq}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:" List\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:" heapq\n\n\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:as}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,at]},children:[{type:a,value:"solution"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:av}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,aw]},children:[{type:a,value:"solution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aB}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:"\n        root "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" result "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        heap "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,ae]},children:[{type:a,value:"# 각 연결 리스트의 루트를 힙에 저장"}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:" i "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aE}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:"range"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:"len"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:C}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,ae]},children:[{type:a,value:"# heapq에는 중복된 값을 저장할 수 없기 때문에"}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,ae]},children:[{type:a,value:"# 중복된 값을 구분할 수 있도록 다음과 같이 3개의 값을 튜플로 묶어 인자로 전달"}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bv},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,ae]},children:[{type:a,value:"# 힙 추출 이후 다음 노드는 다시 저장"}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aC}]},{type:a,value:" heap"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:"\n            node "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" heapq"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"heappop"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n            idx "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:H}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n            result"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:"2"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n\n            result "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:C}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:bv},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bb},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:" idx"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:" root"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:t}]},{type:a,value:f}]}]}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:B,props:{},children:[{type:a,value:f},{type:b,tag:r,props:{},children:[{type:b,tag:v,props:{},children:[{type:a,value:L}]},{type:a,value:" 모듈을 사용하여 문제를 푼 결과 압도적인 실행 시간 차이를 보여준다."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:a$,props:{},children:[{type:b,tag:"img",props:{alt:aK,src:"\u002Fimages\u002F210517-leetcode-23.png"},children:[]}]},{type:a,value:f},{type:b,tag:N,props:{id:aX},children:[{type:b,tag:u,props:{href:"#%EB%B0%B0%EC%9A%B4-%EC%A0%90",ariaHidden:x,tabIndex:y},children:[{type:b,tag:c,props:{className:[z,A]},children:[]}]},{type:a,value:aY}]},{type:a,value:f},{type:b,tag:$,props:{id:aZ},children:[{type:b,tag:u,props:{href:"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90",ariaHidden:x,tabIndex:y},children:[{type:b,tag:c,props:{className:[z,A]},children:[]}]},{type:a,value:a_}]},{type:a,value:f},{type:b,tag:B,props:{},children:[{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"파이썬에서 우선순위 큐는 "},{type:b,tag:v,props:{},children:[{type:a,value:L}]},{type:a,value:" 모듈과 "},{type:b,tag:v,props:{},children:[{type:a,value:"queue.PriorityQueue"}]},{type:a,value:" 클래스를 이용해 사용할 수 있지만, 후자는 내부적으로 "},{type:b,tag:v,props:{},children:[{type:a,value:L}]},{type:a,value:"를 사용하도록 구현되어 있기 때문에 사실상 둘은 동일하다."}]},{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"차이점이 있다면 전자는 후자에 비해 멀티 스레드 환경에서 안전하지 않다. 즉, 스레드 세이프(Thread-Safe)를 보장하지 않는다."}]},{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"하지만 파이썬은 GIL의 특성상 멀티 스레딩이 거의 의미가 없으므로  "},{type:b,tag:v,props:{},children:[{type:a,value:"PriorityQueue"}]},{type:a,value:"의 멀티 스레딩 지원은 그리 큰 의미를 가지지 않는다. 그리고 스레드 세이프를 보장한다는 건 성능에 영향을 끼친다는 뜻이기도 하다. (내부적으로 락킹(Locking)을 제공하며, 락킹 오버헤드(Locking Overhead)가 발생하므로)\n"},{type:b,tag:B,props:{},children:[{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"GIL(Global Interpreter Lock, 전역 인터프리터 락): 하나의 스레드가 자원을 독점하는 형태로 실행\n"},{type:b,tag:B,props:{},children:[{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"CPython 개발 초기에 번거로운 동시성 관리를 편리하게 하고, 스레드 세이프하지 않은 CPython의 메모리 관리를 쉽게 하기 위해 도입했으나, 멀티 코어가 당연한 지금은 치명적인 특징이다."}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"실무에서도 우선순위 큐는 대부분 "},{type:b,tag:v,props:{},children:[{type:a,value:L}]},{type:a,value:"로 구현한다고 하니, 그냥 웬만하면 "},{type:b,tag:v,props:{},children:[{type:a,value:L}]},{type:a,value:"를 쓰는 게 낫다."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:N,props:{id:_},children:[{type:b,tag:u,props:{href:"#%EC%B6%9C%EC%B2%98",ariaHidden:x,tabIndex:y},children:[{type:b,tag:c,props:{className:[z,A]},children:[]}]},{type:a,value:_}]},{type:a,value:f},{type:b,tag:B,props:{},children:[{type:a,value:f},{type:b,tag:r,props:{},children:[{type:a,value:"박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p274-278.\n"},{type:b,tag:B,props:{},children:[{type:a,value:f},{type:b,tag:r,props:{},children:[{type:b,tag:u,props:{href:"https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview",rel:[af,ag,ah],target:ai},children:[{type:a,value:"도서 정보"}]}]},{type:a,value:f},{type:b,tag:r,props:{},children:[{type:b,tag:u,props:{href:"https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview",rel:[af,ag,ah],target:ai},children:[{type:a,value:"GitHub"}]}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f}]}]},text:"\n## 문제 링크\n\nhttps:\u002F\u002Fleetcode.com\u002Fproblems\u002Fmerge-k-sorted-lists\u002F\n\n## 나의 풀이\n\n### 첫 번째 시도 (시간 초과)\n\n- 매 루프마다 각 연결 리스트의 head value를 리스트로 저장하고, 최솟값에 해당하는 연결 리스트의 값을 `result`에 저장 후 갱신하는 방법을 사용했다.\n- 결과는 이상이 없지만 시간 초과로 인하여 오답 처리가 되었다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nfrom typing import List\n\n\nclass Solution:\n    def my_solution1(self, lists: List[ListNode]) -\u003E ListNode:\n        if not lists:\n            return None\n\n        result = merged = ListNode(None)\n        while 1:\n            curr = [node.val if node else float('inf') for node in lists]\n            min_value = min(curr)\n            if min_value != float('inf'):\n                idx = curr.index(min_value)\n                merged.next = ListNode(lists[idx].val)\n                merged = merged.next\n                lists[idx] = lists[idx].next\n            else:\n                break\n\n        return result.next\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n### 두 번째 시도\n\n- 매 루프마다 각 연결 리스트의 head value를 리스트로 저장하는 방법 대신 루프 이전에 미리 리스트를 생성해놓고, 최솟값을 찾으면 해당 인덱스의 값을 변경하는 방법을 사용했다.\n- 무사히 통과는 했으나, 여전히 느리다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nfrom typing import List\n\n\nclass Solution:\n    def my_solution2(self, lists: List[ListNode]) -\u003E ListNode:\n        if not lists:\n            return None\n\n        result = merged = ListNode(None)\n        curr = [[node.val, i] if node else (float('inf'), i) for i, node in enumerate(lists)]\n        while 1:\n            min_value, min_idx = min(curr, key=lambda x: x[0])\n            if min_value != float('inf'):\n                merged.next = ListNode(lists[min_idx].val)\n                merged = merged.next\n                lists[min_idx] = lists[min_idx].next\n                curr[min_idx][0] = lists[min_idx].val if lists[min_idx] else float('inf')\n            else:\n                break\n\n        return result.next\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 문제 풀이\n\n### 우선순위 큐를 이용한 리스트 병합\n\n- `heapq` 모듈(최소 힙)을 사용하여 간단하게 해결할 수 있음\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nfrom typing import List\nimport heapq\n\n\nclass solution:\n    def solution1(self, lists: List[ListNode]) -\u003E ListNode:\n        root = result = ListNode(None)\n        heap = []\n\n        # 각 연결 리스트의 루트를 힙에 저장\n        for i in range(len(lists)):\n            if lists[i]:\n                # heapq에는 중복된 값을 저장할 수 없기 때문에\n                # 중복된 값을 구분할 수 있도록 다음과 같이 3개의 값을 튜플로 묶어 인자로 전달\n                heapq.heappush(heap, (lists[i].val, i, lists[i]))\n\n        # 힙 추출 이후 다음 노드는 다시 저장\n        while heap:\n            node = heapq.heappop(heap)\n            idx = node[1]\n            result.next = node[2]\n\n            result = result.next\n            if result.next:\n                heapq.heappush(heap, (result.next.val, idx, result.next))\n\n        return root.next\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n- `heapq` 모듈을 사용하여 문제를 푼 결과 압도적인 실행 시간 차이를 보여준다.\n\n![leetcode-23](\u002Fimages\u002F210517-leetcode-23.png)\n\n## 배운 점\n\n### 파이썬에서의 우선순위 큐\n\n- 파이썬에서 우선순위 큐는 `heapq` 모듈과 `queue.PriorityQueue` 클래스를 이용해 사용할 수 있지만, 후자는 내부적으로 `heapq`를 사용하도록 구현되어 있기 때문에 사실상 둘은 동일하다.\n- 차이점이 있다면 전자는 후자에 비해 멀티 스레드 환경에서 안전하지 않다. 즉, 스레드 세이프(Thread-Safe)를 보장하지 않는다.\n- 하지만 파이썬은 GIL의 특성상 멀티 스레딩이 거의 의미가 없으므로  `PriorityQueue`의 멀티 스레딩 지원은 그리 큰 의미를 가지지 않는다. 그리고 스레드 세이프를 보장한다는 건 성능에 영향을 끼친다는 뜻이기도 하다. (내부적으로 락킹(Locking)을 제공하며, 락킹 오버헤드(Locking Overhead)가 발생하므로)\n  - GIL(Global Interpreter Lock, 전역 인터프리터 락): 하나의 스레드가 자원을 독점하는 형태로 실행\n    - CPython 개발 초기에 번거로운 동시성 관리를 편리하게 하고, 스레드 세이프하지 않은 CPython의 메모리 관리를 쉽게 하기 위해 도입했으나, 멀티 코어가 당연한 지금은 치명적인 특징이다.\n- 실무에서도 우선순위 큐는 대부분 `heapq`로 구현한다고 하니, 그냥 웬만하면 `heapq`를 쓰는 게 낫다.\n\n## 출처\n\n- 박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p274-278.\n  - [도서 정보](https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview)\n  - [GitHub](https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview)\n",dir:"\u002Fposts\u002F2021\u002F05\u002F17",path:"\u002Fposts\u002F2021\u002F05\u002F17\u002Fleetcode-23",extension:".md",createdAt:"2021-05-17T14:03:17.000Z",updatedAt:"2022-06-26T10:01:49.000Z"},isErrorPage:F,isDarkMode:F,isScrolled:F,isMobile:F,isTablet:F,hasHeaderImage:aI,isMobileMenuOpened:F,headerImage:"",perPage:10},serverRendered:aI,routePath:"\u002Fposts\u002Fleetcode-23",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:aJ},content:{dbHash:"4b3e59a4"}},colorMode:{preference:bx,value:bx,unknown:aI,forced:F}}}("text","element","span","token","punctuation","\n","keyword"," ","operator","(",")",".","=","builtin","[","]",":","li",",","next","a","code"," lists","true",-1,"icon","icon-link","ul","if"," ListNode","\n            ",false,"div","1","\n        ","number","min_idx","heapq",2,"h2","return","boolean","None","else","float","string","'inf'","lists","val","\n\n        "," result",3,"출처","h3","import"," node ","\n                "," i","comment","nofollow","noopener","noreferrer","_blank","details","summary","소스 코드","nuxt-content-highlight","pre","language-python","line-numbers","from"," typing ","class","class-name","\n    ","def","function","self"," List","ListNode","-","\u003E","while","for","in","idx","i","heap",true,null,"leetcode-23","문제-링크","문제 링크","나의-풀이","나의 풀이","첫-번째-시도-시간-초과","첫 번째 시도 (시간 초과)","두-번째-시도","두 번째 시도","문제-풀이","문제 풀이","우선순위-큐를-이용한-리스트-병합","우선순위 큐를 이용한 리스트 병합","배운-점","배운 점","파이썬에서의-우선순위-큐","파이썬에서의 우선순위 큐","p","https:\u002F\u002Fleetcode.com\u002Fproblems\u002Fmerge-k-sorted-lists\u002F","result"," List\n\n\n","Solution","not","\n\n        result "," merged ","node","val ","min","curr"," min_value ","!=","\n                merged","\n                merged "," merged","\n                lists","break"," x","0","\n                heapq","heappush"," node","system"));