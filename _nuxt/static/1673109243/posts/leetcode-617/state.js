window.__NUXT__=(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1673109243",layout:"default",error:ag,state:{post:{slug:"leetcode-617",description:"Merge Two Binary Trees",title:"LeetCode 617번 문제",tags:"algorithm, leetcode, python, tree, dfs",toc:[{id:ah,depth:L,text:ai},{id:aj,depth:L,text:ak},{id:al,depth:L,text:am},{id:an,depth:3,text:ao},{id:M,depth:L,text:M}],body:{type:"root",children:[{type:b,tag:N,props:{id:ah},children:[{type:b,tag:r,props:{href:"#%EB%AC%B8%EC%A0%9C-%EB%A7%81%ED%81%AC",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:ai}]},{type:a,value:g},{type:b,tag:"p",props:{},children:[{type:b,tag:r,props:{href:ap,rel:[_,$,aa],target:ab},children:[{type:a,value:ap}]}]},{type:a,value:g},{type:b,tag:N,props:{id:aj},children:[{type:b,tag:r,props:{href:"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4-%ED%92%80%EC%9D%B4-%EC%8B%A4%ED%8C%A8",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:ak}]},{type:a,value:g},{type:b,tag:O,props:{},children:[{type:a,value:g},{type:b,tag:y,props:{},children:[{type:a,value:"도저히 감이 잡히지 않는다... 연습 많이 해야겠다."}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:aq,props:{},children:[{type:a,value:g},{type:b,tag:ar,props:{},children:[{type:a,value:as}]},{type:a,value:g},{type:b,tag:P,props:{markdown:at},children:[{type:a,value:g},{type:b,tag:P,props:{className:[au]},children:[{type:b,tag:av,props:{className:[aw,ax]},children:[{type:b,tag:ay,props:{},children:[{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:az}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aB}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Q}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,R]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:T}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:aD}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,aF]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:aK},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Q}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,R]},children:[{type:a,value:"MySolution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:T}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aN}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aO}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aP}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Y}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"+="}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:"val\n        "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aQ}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Y}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aR}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aQ}]},{type:a,value:" root2 "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Y}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aR}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:" root2\n\n        "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:" root1\n"}]}]}]},{type:a,value:g}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:N,props:{id:al},children:[{type:b,tag:r,props:{href:"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:am}]},{type:a,value:g},{type:b,tag:"h3",props:{id:an},children:[{type:b,tag:r,props:{href:"#1-%EC%9E%AC%EA%B7%80-%ED%83%90%EC%83%89-%ED%9B%84%EC%9C%84-%EC%88%9C%ED%9A%8C",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:ao}]},{type:a,value:g},{type:b,tag:O,props:{},children:[{type:a,value:g},{type:b,tag:y,props:{},children:[{type:a,value:"내가 풀었던 방법인 기존에 존재하는 노드에 다른 노드의 값을 합치는 방법 대신 새로운 노드를 만든 후 왼쪽과 오른쪽 자식에 재귀 호출을 하는 방법을 사용한다."}]},{type:a,value:g},{type:b,tag:y,props:{},children:[{type:a,value:"그리고 어느 한쪽 노드가 존재하지 않는다면 존재하는 노드만 리턴하고, 양쪽 자식 노드가 모두 존재하지 않는다면 (암묵적으로) None을 리턴한다."}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:aq,props:{},children:[{type:a,value:g},{type:b,tag:ar,props:{},children:[{type:a,value:as}]},{type:a,value:g},{type:b,tag:P,props:{markdown:at},children:[{type:a,value:g},{type:b,tag:P,props:{className:[au]},children:[{type:b,tag:av,props:{className:[aw,ax]},children:[{type:b,tag:ay,props:{},children:[{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:az}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aB}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Q}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,R]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:T}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:aD}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,aF]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:aK},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Q}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,R]},children:[{type:a,value:"Solution1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:T}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aN}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aO}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:C}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aP}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Y}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:"\n            node "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:" TreeNode"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:W},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"+"}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:"val"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:j}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:f}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:" node\n        "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"else"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:l}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"or"}]},{type:a,value:" root2\n"}]}]}]},{type:a,value:g}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:N,props:{id:M},children:[{type:b,tag:r,props:{href:"#%EC%B6%9C%EC%B2%98",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:M}]},{type:a,value:g},{type:b,tag:O,props:{},children:[{type:a,value:g},{type:b,tag:y,props:{},children:[{type:a,value:"박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p404-405.\n"},{type:b,tag:O,props:{},children:[{type:a,value:g},{type:b,tag:y,props:{},children:[{type:b,tag:r,props:{href:"https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview",rel:[_,$,aa],target:ab},children:[{type:a,value:"도서 정보"}]}]},{type:a,value:g},{type:b,tag:y,props:{},children:[{type:b,tag:r,props:{href:"https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview",rel:[_,$,aa],target:ab},children:[{type:a,value:"GitHub"}]}]},{type:a,value:g}]},{type:a,value:g}]},{type:a,value:g}]}]},text:"\n## 문제 링크\n\nhttps:\u002F\u002Fleetcode.com\u002Fproblems\u002Fmerge-two-binary-trees\u002F\n\n## 나의 풀이 (풀이 실패)\n\n- 도저히 감이 잡히지 않는다... 연습 많이 해야겠다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nfrom typing import Optional\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass MySolution1:\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -\u003E Optional[TreeNode]:\n        if root1 and root2:\n            root1.left = self.mergeTrees(root1.left, root2.left)\n            root1.right = self.mergeTrees(root1.right, root2.right)\n            root1.val += root2.val\n        elif root1 and not root2:\n            root1.left = self.mergeTrees(root1.left, None)\n            root1.right = self.mergeTrees(root1.right, None)\n        elif root2 and not root1:\n            root2.left = self.mergeTrees(None, root2.left)\n            root2.right = self.mergeTrees(None, root2.right)\n            return root2\n\n        return root1\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 문제 풀이\n\n### 1. 재귀 탐색 (후위 순회)\n\n- 내가 풀었던 방법인 기존에 존재하는 노드에 다른 노드의 값을 합치는 방법 대신 새로운 노드를 만든 후 왼쪽과 오른쪽 자식에 재귀 호출을 하는 방법을 사용한다.\n- 그리고 어느 한쪽 노드가 존재하지 않는다면 존재하는 노드만 리턴하고, 양쪽 자식 노드가 모두 존재하지 않는다면 (암묵적으로) None을 리턴한다.\n\n\u003Cdetails\u003E\n\u003Csummary\u003E소스 코드\u003C\u002Fsummary\u003E\n\u003Cdiv markdown=\"1\"\u003E\n\n```python\nfrom typing import Optional\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution1:\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -\u003E Optional[TreeNode]:\n        if root1 and root2:\n            node = TreeNode(root1.val + root2.val)\n            node.left = self.mergeTrees(root1.left, root2.left)\n            node.right = self.mergeTrees(root1.right, root2.right)\n            return node\n        else:\n            return root1 or root2\n```\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\n## 출처\n\n- 박상길, 『파이썬 알고리즘 인터뷰』, 책만(2020), p404-405.\n  - [도서 정보](https:\u002F\u002Fwww.onlybook.co.kr\u002Fentry\u002Falgorithm-interview)\n  - [GitHub](https:\u002F\u002Fgithub.com\u002Fonlybooks\u002Falgorithm-interview)\n",dir:"\u002Fposts\u002F2021\u002F08\u002F17",path:"\u002Fposts\u002F2021\u002F08\u002F17\u002Fleetcode-617",extension:".md",createdAt:"2021-08-17T08:47:29.000Z",updatedAt:"2022-06-26T10:01:49.000Z"},isErrorPage:x,isDarkMode:x,isScrolled:x,isMobile:x,isTablet:x,hasHeaderImage:af,isMobileMenuOpened:x,headerImage:"",perPage:10},serverRendered:af,routePath:"\u002Fposts\u002Fleetcode-617",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:ag},content:{dbHash:"c8d98fee"}},colorMode:{preference:aU,value:aU,unknown:af,forced:x}}}("text","element","span","token","punctuation",".","\n","keyword","operator","=",",",":"," ","(",")"," root2","mergeTrees","a","TreeNode","boolean","None"," self","root1",false,"li","left ","right "," Optional","[","]","left","right","true",-1,"icon","icon-link","\n            root1",2,"출처","h2","ul","div","class","class-name","\n    ","def","function","self","val "," root1 ","and","return","nofollow","noopener","noreferrer","_blank"," root1","\n        ","\n            ",true,null,"문제-링크","문제 링크","나의-풀이-풀이-실패","나의 풀이 (풀이 실패)","문제-풀이","문제 풀이","1-재귀-탐색-후위-순회","1. 재귀 탐색 (후위 순회)","https:\u002F\u002Fleetcode.com\u002Fproblems\u002Fmerge-two-binary-trees\u002F","details","summary","소스 코드","1","nuxt-content-highlight","pre","language-python","line-numbers","code","from"," typing ","import"," Optional\n\n\n","__init__"," val","number","0"," left"," right","\n        self"," val\n        self"," left\n        self"," right\n\n\n","-","\u003E","if","elif","not","\n            root2","\n            node","system"));